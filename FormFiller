import pyautogui as pg
import time
import webbrowser
import sys
import random

pg.FAILSAFE = True


class Filling_form(object):
    def __init__(self, name, info_):
        """
        Initialize the FillingForm instance with the given name and info.
        
        Opens the form website in the default web browser and expands the form if necessary.
        
        Parameters:
            name (str): The name to be entered into the form.
            info (list): A list of strings containing the information to be entered into the form.
        """
        self.name = name
        self.info_ = info_

        print(self.name)
        print(self.info_)
        webbrowser.open_new('https://docs.google.com/forms/d/e/1FAIpQLScSVDFU76rZvbO_tiIwSt6d9sOK0CZyS9KKMCP6cP5O5W5lVQ/viewform')
        time.sleep(1)
        pos = pg.locateOnScreen('C:/C/pyautogui/expand.png')
        if pos:
            cent = pg.center(pos)
            pg.click(cent)
        self.generic()

    def generic(self):
        """
        Scroll through the form until the 'name' field is found.
        """
        time.sleep(0.2)

        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/genericForm.png')
            if pos:
                break
            else:
                if i % 2 == 0:
                    pg.scroll(-1000)
                else:
                    pg.scroll(1000)
        self.name()

    def name(self):
        """
        Scroll through the form until the 'name' field is found and enter the name into the field.
        """
        time.sleep(0.2)
        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/name.png')
            if pos:
                cent = pg.center(pos)
                pg.moveTo(cent, duration=0.2)
                pg.click(cent)
                pg.typewrite(self.name, 0.2)
                break
            else:
                if i % 2 == 0:
                    pg.scroll(i * (-1000))
                else:
                    pg.scroll(i * 1000)
        self.fear()

    def fear(self):
        """
        Scroll through the form until the 'fear' field is found and enter the fear into the field.
        """
        time.sleep(0.2)
        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/fear.png')
            if pos:
                cent = pg.center(pos)
                pg.moveTo(cent, duration=0.2)
                pg.click(cent)
                pg.typewrite(self.info_[0], 0.2)
                break
            else:
                if i % 2 == 0:
                    pg.scroll(i * (-1000))
                else:
                    pg.scroll(i * (1000))
        self.select_m()

    def select_m(self):
        """
        Scroll through the form until the 'Power' field is found and select a random value for the field.
        """
        rnd = random.choice(['True', 'True', 'False'])
        rnd_height = random.randint(40, 80)
        if rnd == 'True':
            for i in range(1, 4):
                pos = pg.locateOnScreen('C:/C/pyautogui/power.png')
                if pos:
                    time.sleep(0.2)
                    x, y = pg.center(pos)
                    pg.moveTo(x - 10, y + 20, duration=0.2)
                    pg.click(x - 10, y + 20)
                    time.sleep(0.2)
                    pg.moveTo(x - 40, y + rnd_height, duration=0.2)
                    pg.click(x - 40, y + rnd_height)
                    break

        self.radioB()

    def radioB(self):
        """
        Scroll through the form until the 'Radio Button' field is found and select a random value for the field.
        """
        time.sleep(0.2)
        rnd_pos = random.randrange(-50, 50, 5)
        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/radioB.png')
            if pos:
                x, y = pg.center(pos)
                pg.moveTo(x + rnd_pos, y, duration=0.2)
                for j in range(10):
                    pg.click(x + rnd_pos + j, y)
        self.additComment()

    def additComment(self):
        """
        Scroll through the form until the 'Additional Comments' field is found and enter the comments into the field.
        """
        time.sleep(0.2)
        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/additComment.png')
            if pos:
                cent = pg.center(pos)
                pg.moveTo(cent, duration=0.2)
                pg.click(cent)
                pg.typewrite(self.info_[1], 0.2)
            else:
                if i % 2 == 0:
                    pg.scroll(i * (-1000))
                else:
                    pg.scroll(i * (1000))
        self.submit()

    def submit(self):
        """
        Scroll through the form until the 'Submit' button is found and click it to submit the form.
        """
        time.sleep(0.2)
        for i in range(1, 4):
            pos = pg.locateOnScreen('C:/C/pyautogui/submit.png')
            if pos:
                cent = pg.center(pos)
                pg.moveTo(cent)
                pg.click(cent)
                pg.click()
                self.done_()
                break
            else:
                if i % 2 == 0:
                    pg.scroll(-1000)
                else:
                    pg.scroll(1000)

    def done_(self):
        time.sleep(0.2)
        for i in range(1, 4):
            pos_exit = pg.locateOnScreen('C:/C/pyautogui/done.png')
            if pos_exit:
                self.toClose()
                print('pos_exit')
            else:
                self.red_label()

    def red_label(self):
        rnd_height = random.randint(20, 60)
        time.sleep(0.2)
        for i in range(1, 4):
            pos_red = pg.locateOnScreen('C:/C/pyautogui/obligatoria.png')
            if pos_red:
                time.sleep(0.2)
                x, y = pg.center(pos_red)
                pg.moveTo(x, y - 20, duration=0.2)
                pg.click(x, y - 20)
                time.sleep(0.2)
                pg.moveTo(x, y + rnd_height, duration=0.2)
                pg.click(x, y + rnd_height)
                self.submit()

    def toClose(self):
        print('toClose')
        time.sleep(0.2)
        pg.hotkey('ctrl', 'w')


def main():
    formData = {'Alice': ['To dance', 'My name is Alice!'],
                'Denys': ['To be c-t', 'Dunno what to tyoe here...'],
                'Bob': ['To sweam', 'Im not very good at coding...'],
                'Arni': ['To be a terminator', 'I wanna be a president']}
    dict_list = list(formData.keys())

    for i in range(3):
        rnd = random.choice(dict_list)
        dict_list.remove(rnd)
        start = Filling_form(rnd, formData[rnd])


main()
